<?php
/**
 * Main Plugin Class
 * 
 * Central orchestrator for the Happy Place Plugin
 * Handles initialization, loading, and coordination of all plugin components
 *
 * @package HappyPlace
 */

namespace HappyPlace;

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class Plugin {
    
    /**
     * Single instance of the plugin
     */
    private static $instance = null;
    
    /**
     * Plugin components
     */
    private array $components = [];
    
    /**
     * Plugin loaded status
     */
    private bool $loaded = false;
    
    /**
     * Component loading configuration
     */
    private array $core_components = [
        'Assets_Manager' => 'core/class-assets-manager.php',
        'Post_Types' => 'core/class-post-types.php',
        'Taxonomies' => 'core/class-taxonomies.php',
        'Database' => 'core/class-database.php',
    ];
    
    private array $field_components = [
        'ACF_Manager' => 'core/class-acf-manager.php',
    ];
    
    private array $admin_components = [
        'Admin_Menu' => 'admin/class-admin-menu.php',
        'ACF_Sync_Manager' => 'admin/class-acf-sync-manager.php',
    ];
    
    private array $dashboard_components = [
        'Dashboard_Manager' => 'dashboard/class-dashboard-manager.php',
    ];
    
    private array $api_components = [
        'Dashboard_Ajax' => 'api/ajax/class-dashboard-ajax.php',
        'REST_API' => 'api/class-rest-api.php',
    ];
    
    private array $service_components = [
        'Listing_Service' => 'services/class-listing-service.php',
        'Agent_Service' => 'services/class-agent-service.php',
    ];
    
    private array $form_components = [
        'Lead_Capture' => 'forms/class-lead-capture.php',
    ];
    
    private array $search_components = [
        'Property_Search' => 'search/class-property-search.php',
    ];
    
    private array $integration_components = [
        'Airtable_Sync_Manager' => 'integrations/class-airtable-sync-manager.php',
    ];
    
    private array $cli_components = [
        'CLI_Manager' => 'class-cli-manager.php',
    ];
    
    /**
     * Get singleton instance
     */
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Initialize the plugin
     */
    private function __construct() {
        $this->setup_hooks();
        $this->load_components();
    }
    
    /**
     * Set up WordPress hooks
     */
    private function setup_hooks(): void {
        add_action('init', [$this, 'init'], 5);
        add_action('admin_init', [$this, 'admin_init'], 10);
        add_action('wp_enqueue_scripts', [$this, 'enqueue_frontend_assets']);
        add_action('admin_enqueue_scripts', [$this, 'enqueue_admin_assets']);
        
        // ACF integration
        add_action('acf/init', [$this, 'acf_init']);
        
        // AJAX hooks - register early to ensure they're available
        $this->setup_ajax_hooks();
    }
    
    /**
     * Load plugin components
     */
    private function load_components(): void {
        try {
            // Load components in order
            $this->load_component_group($this->core_components, 'HappyPlace\\Core\\');
            $this->load_component_group($this->field_components, 'HappyPlace\\Core\\');
            
            if (is_admin()) {
                $this->load_component_group($this->admin_components, 'HappyPlace\\Admin\\');
            }
            
            $this->load_component_group($this->dashboard_components, 'HappyPlace\\Dashboard\\');
            
            // Load API components with different namespaces
            if (isset($this->api_components['Dashboard_Ajax'])) {
                $this->load_component_group(['Dashboard_Ajax' => $this->api_components['Dashboard_Ajax']], 'HappyPlace\\API\\Ajax\\');
            }
            if (isset($this->api_components['REST_API'])) {
                $this->load_component_group(['REST_API' => $this->api_components['REST_API']], 'HappyPlace\\API\\');
            }
            
            $this->load_component_group($this->form_components, 'HappyPlace\\Forms\\');
            $this->load_component_group($this->search_components, 'HappyPlace\\Search\\');
            $this->load_component_group($this->integration_components, 'HappyPlace\\Integrations\\');
            $this->load_component_group($this->cli_components, 'HappyPlace\\');
            // $this->load_component_group($this->service_components, 'HappyPlace\\Services\\'); // Temporarily disabled
            
            $this->loaded = true;
            do_action('hp_plugin_loaded', $this);
            
            hp_log('All components loaded successfully', 'info', 'PLUGIN');
            
        } catch (\Exception $e) {
            hp_log('Error loading components: ' . $e->getMessage(), 'error', 'PLUGIN');
        }
    }
    
    /**
     * Load a group of components
     */
    private function load_component_group(array $components, string $namespace_prefix): void {
        foreach ($components as $class_name => $file_path) {
            $full_path = HP_INCLUDES_DIR . $file_path;
            $full_class_name = $namespace_prefix . $class_name;
            
            if (file_exists($full_path)) {
                require_once $full_path;
                
                if (class_exists($full_class_name)) {
                    try {
                        // Initialize component based on available methods
                        if (method_exists($full_class_name, 'get_instance')) {
                            $this->components[$class_name] = $full_class_name::get_instance();
                        } elseif (method_exists($full_class_name, 'instance')) {
                            $this->components[$class_name] = $full_class_name::instance();
                        } elseif (method_exists($full_class_name, 'initialize')) {
                            $full_class_name::initialize();
                            $this->components[$class_name] = 'initialized';
                        } else {
                            $this->components[$class_name] = new $full_class_name();
                        }
                        
                        hp_log("{$class_name} loaded successfully", 'debug', 'COMPONENT');
                        
                    } catch (\Exception $e) {
                        hp_log("Error loading {$class_name}: " . $e->getMessage(), 'error', 'COMPONENT');
                    }
                } else {
                    hp_log("Class {$full_class_name} not found after loading {$file_path}", 'error', 'COMPONENT');
                }
            } else {
                hp_log("File not found: {$full_path}", 'error', 'COMPONENT');
            }
        }
    }
    
    /**
     * Initialize plugin after WordPress is loaded
     */
    public function init(): void {
        if (!$this->loaded) {
            return;
        }
        
        // Initialize all loaded components
        foreach ($this->components as $name => $component) {
            if (is_object($component) && method_exists($component, 'init')) {
                try {
                    $component->init();
                } catch (\Exception $e) {
                    hp_log("Error initializing {$name}: " . $e->getMessage(), 'error', 'INIT');
                }
            }
        }
        
        // Add rewrite rules
        $this->add_rewrite_rules();
        
        do_action('hp_init', $this);
        hp_log('Plugin initialization completed', 'info', 'INIT');
    }
    
    /**
     * Admin initialization
     */
    public function admin_init(): void {
        if (!$this->loaded) {
            return;
        }
        
        // Initialize admin components
        foreach ($this->components as $name => $component) {
            if (is_object($component) && method_exists($component, 'admin_init')) {
                try {
                    $component->admin_init();
                } catch (\Exception $e) {
                    hp_log("Error in admin_init for {$name}: " . $e->getMessage(), 'error', 'ADMIN');
                }
            }
        }
        
        do_action('hp_admin_init', $this);
    }
    
    /**
     * ACF initialization
     */
    public function acf_init(): void {
        if (!$this->loaded) {
            return;
        }
        
        // Initialize ACF-dependent components
        foreach ($this->components as $name => $component) {
            if (is_object($component) && method_exists($component, 'acf_init')) {
                try {
                    $component->acf_init();
                } catch (\Exception $e) {
                    hp_log("Error in acf_init for {$name}: " . $e->getMessage(), 'error', 'ACF');
                }
            }
        }
        
        do_action('hp_acf_init', $this);
    }
    
    /**
     * Enqueue frontend assets
     */
    public function enqueue_frontend_assets(): void {
        if (isset($this->components['Assets_Manager'])) {
            $this->components['Assets_Manager']->enqueue_frontend();
        }
    }
    
    /**
     * Enqueue admin assets
     */
    public function enqueue_admin_assets($hook): void {
        if (isset($this->components['Assets_Manager'])) {
            $this->components['Assets_Manager']->enqueue_admin($hook);
        }
    }
    
    /**
     * Set up AJAX hooks
     */
    private function setup_ajax_hooks(): void {
        // Dashboard AJAX actions
        $ajax_actions = [
            'hp_dashboard_overview',
            'hp_dashboard_listings',
            'hp_dashboard_analytics',
            'hp_save_listing',
            'hp_delete_listing',
            'hp_toggle_featured',
            'hp_generate_flyer',
            'hp_load_marketing_suite',
        ];
        
        foreach ($ajax_actions as $action) {
            add_action("wp_ajax_{$action}", [$this, 'handle_ajax_request']);
            add_action("wp_ajax_nopriv_{$action}", [$this, 'handle_ajax_request']);
        }
    }
    
    /**
     * Handle AJAX requests
     */
    public function handle_ajax_request(): void {
        $action = $_REQUEST['action'] ?? '';
        
        // Security check
        if (!wp_verify_nonce($_REQUEST['nonce'] ?? '', 'hp_ajax_nonce')) {
            wp_send_json_error(['message' => 'Security check failed']);
            return;
        }
        
        // Route to appropriate handler
        if (isset($this->components['Dashboard_Manager']) && 
            strpos($action, 'hp_dashboard_') === 0) {
            $this->components['Dashboard_Manager']->handle_ajax($action);
        } else {
            // Default handling
            do_action("hp_ajax_{$action}");
        }
    }
    
    /**
     * Add custom rewrite rules
     */
    private function add_rewrite_rules(): void {
        // Agent dashboard rule
        add_rewrite_rule(
            '^agent-dashboard/?(.*)$',
            'index.php?pagename=agent-dashboard&dashboard_section=$matches[1]',
            'top'
        );
        
        // Add query vars
        add_filter('query_vars', function($vars) {
            $vars[] = 'dashboard_section';
            return $vars;
        });
    }
    
    /**
     * Get component instance
     */
    public function get_component(string $name) {
        return $this->components[$name] ?? null;
    }
    
    /**
     * Check if plugin is loaded
     */
    public function is_loaded(): bool {
        return $this->loaded;
    }
    
    /**
     * Get all loaded components
     */
    public function get_components(): array {
        return $this->components;
    }
}
